{"version":3,"sources":["asset/icon/menu-hall.svg","asset/icon/menu-bar.svg","asset/icon/menu-club.svg","asset/icon/menu-room.svg","constant/menu.js","component/MainMenu/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAIN_MENU","path","name","MenuArea","styled","div","props","theme","grey","primary","active","MenuImg","hall","bar","club","room","MainMenu","useState","page","setPage","map","item","index","key","to","onClick","src","alt","Hall","lazy","Bar","Club","Room","defaultTheme","secondary","lightgrey","darkgrey","whitegrey","black","white","Main","App","fallback","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mLCA9BC,EAAY,CACvB,CACEC,KAAM,IACNC,KAAM,QAER,CACED,KAAM,QACNC,KAAM,OAER,CACED,KAAM,SACNC,KAAM,QAER,CACED,KAAM,SACNC,KAAM,S,msBCNV,IAAMC,EAAWC,IAAOC,IAAV,IAWQ,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,MAK9B,SAAAF,GAAK,OAAIA,EAAMC,MAAME,SAOhB,SAAAH,GAAK,OAAIA,EAAMI,OAAS,IAUpCC,EAAU,CAACC,IAAMC,IAAKC,IAAMC,KAkBnBC,EAhBE,WAAO,IAAD,EACGC,mBAAS,GADZ,mBACdC,EADc,KACRC,EADQ,KAErB,OACE,kBAAChB,EAAD,CAAUO,OAAQQ,GACflB,EAAUoB,IAAI,SAACC,EAAMC,GACpB,OACE,kBAAC,IAAD,CAAMC,IAAG,kBAAaD,GAASE,GAAIH,EAAKpB,KAAMwB,QAAS,kBAAMN,EAAQG,KACnE,yBAAKI,IAAKf,EAAQW,GAAQK,IAAKN,EAAKnB,OACnCmB,EAAKnB,U,2NC/ClB,IAAM0B,EAAOC,eAAK,kBAAM,+BAClBC,EAAMD,eAAK,kBAAM,+BACjBE,EAAOF,eAAK,kBAAM,+BAClBG,EAAOH,eAAK,kBAAM,+BAElBI,EAAe,CACnBxB,QAAS,UACTyB,UAAW,QACXC,UAAW,qBACX3B,KAAM,sBACN4B,SAAU,qBACVC,UAAW,2BACXC,MAAO,QACPC,MAAO,SAGHC,EAAOpC,IAAOC,IAAV,IAOY,SAAAC,GAAK,OAAIA,EAAMC,MAAME,UAuB5BgC,MApBf,WACE,OACE,kBAAC,IAAD,CAAelC,MAAO0B,GACpB,kBAACO,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUE,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAAC1C,KAAK,IAAI2C,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,OAAK,EAAC1C,KAAK,QAAQ2C,UAAWd,IACrC,kBAAC,IAAD,CAAOa,OAAK,EAAC1C,KAAK,SAAS2C,UAAWb,IACtC,kBAAC,IAAD,CAAOY,OAAK,EAAC1C,KAAK,SAAS2C,UAAWZ,UC9BhCa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2e5c0740.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu-hall.0f1e7110.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu-bar.1ca39788.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu-club.47ce6295.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu-room.432f4f75.svg\";","export const MAIN_MENU = [\r\n  {\r\n    path: '/',\r\n    name: 'HALL'\r\n  },\r\n  {\r\n    path: '/bar/',\r\n    name: 'BAR'\r\n  },\r\n  {\r\n    path: '/club/',\r\n    name: 'CLUB'\r\n  },\r\n  {\r\n    path: '/room/',\r\n    name: 'ROOM'\r\n  }\r\n];","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MAIN_MENU } from \"../../constant/menu\";\r\nimport hall from \"../../asset/icon/menu-hall.svg\";\r\nimport bar from \"../../asset/icon/menu-bar.svg\";\r\nimport club from \"../../asset/icon/menu-club.svg\";\r\nimport room from \"../../asset/icon/menu-room.svg\";\r\n\r\nconst MenuArea = styled.div`\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n  height: 85px;\r\n  bottom: 0;\r\n  padding: 6px;\r\n  font-size: 10px;\r\n  background-color: ${props => props.theme.grey};\r\n  backdrop-filter: blur(10px);\r\n  z-index: 100;\r\n  a {\r\n    font-weight: bold;\r\n    color: ${props => props.theme.primary};\r\n    text-decoration-line: none;\r\n    letter-spacing: 3px;\r\n  }\r\n  & > a {\r\n    opacity: 0.52;\r\n    transition: 0.5s;\r\n    &:nth-child(${props => props.active + 1}) {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  img {\r\n    display: block;\r\n    margin: 4px auto;\r\n  }\r\n`;\r\n\r\nconst MenuImg = [hall, bar, club, room];\r\n\r\nconst MainMenu = () => {\r\n  const [page, setPage] = useState(0);\r\n  return (\r\n    <MenuArea active={page}>\r\n      {MAIN_MENU.map((item, index) => {\r\n        return (\r\n          <Link key={`mainMenu${index}`} to={item.path} onClick={() => setPage(index)}>\r\n            <img src={MenuImg[index]} alt={item.name} />\r\n            {item.name}\r\n          </Link>\r\n        );\r\n      })}\r\n    </MenuArea>\r\n  );\r\n};\r\n\r\nexport default MainMenu;\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\nimport MainMenu from \"./component/MainMenu\";\r\n\r\nconst Hall = lazy(() => import(\"./router/hall\"));\r\nconst Bar = lazy(() => import(\"./router/bar\"));\r\nconst Club = lazy(() => import(\"./router/club\"));\r\nconst Room = lazy(() => import(\"./router/room\"));\r\n\r\nconst defaultTheme = {\r\n  primary: \"#DDB16F\",\r\n  secondary: \"white\",\r\n  lightgrey: \"rgba(0, 0, 0, 0.4)\",\r\n  grey: \"rgba(0, 0, 0, 0.53)\",\r\n  darkgrey: \"rgba(0, 0, 0, 0.7)\",\r\n  whitegrey: \"rgba(255, 255, 255, 0.6)\",\r\n  black: \"black\",\r\n  white: \"white\"\r\n};\r\n\r\nconst Main = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  max-width: 768px;\r\n  height: 100%;\r\n  left: 50%;\r\n  transform: translate(-50%);\r\n  background-color: ${props => props.theme.primary};\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Main>\r\n        <Router>\r\n          <MainMenu />\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Hall} />\r\n              <Route exact path=\"/bar/\" component={Bar} />\r\n              <Route exact path=\"/club/\" component={Club} />\r\n              <Route exact path=\"/room/\" component={Room} />\r\n            </Switch>\r\n          </Suspense>\r\n        </Router>\r\n      </Main>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}