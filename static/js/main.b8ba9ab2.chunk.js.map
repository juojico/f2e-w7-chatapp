{"version":3,"sources":["store/index.js","component/Loader/index.js","component/Select/index.js","i18n/index.js","App.js","serviceWorker.js","index.js"],"names":["Stroe","React","createContext","LoaderArea","styled","div","rotate","keyframes","LoaderBox","props","size","LoaderImg","color","LoaderBar","Loader","defaultProps","SelectBox","Select","onChange","value","text","en","hall","welcome","chooseLogin","btn1","btn2","dayTopic","comment","bar","title","subtitled","filter","of","feel","now","seats","club","room","zh","jing","Hall","lazy","Bar","Club","Room","Chat","defaultTheme","primary","secondary","lightgrey","grey","darkgrey","whitegrey","black","white","Main","theme","App","useState","lang","setLang","Provider","e","target","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8ba9ab2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Stroe = React.createContext();\n\nexport default Stroe;","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst LoaderArea = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  padding-bottom: 100px;\n  z-index: 100;\n`;\n\nconst rotate = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst LoaderBox = styled.div`\n  position: relative;\n  width: ${props => props.size}rem;\n  height: ${props => props.size}rem;\n  border-radius: 100%;\n`;\n\nconst LoaderImg = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 100%;\n  border: 2px solid ${props => props.color};\n  opacity: 0.3;\n  &::after {\n    position: absolute;\n    content: \"Loading...\";\n    width: 100%;\n    font-size: 12px;\n    text-align: center;\n    top: 120%;\n  }\n`;\n\nconst LoaderBar = styled(LoaderImg)`\n  border: none;\n  opacity: 0.6;\n\n  &::before,\n  &::after {\n    box-sizing: border-box;\n    position: absolute;\n    content: \"\";\n    width: 16%;\n    height: 100%;\n    top: 0;\n    left: 50%;\n    margin-left: -8%;\n    border-radius: 10%;\n    border: 2px solid ${props => props.color};\n    animation: ${rotate} 1.5s infinite;\n  }\n\n  &::after {\n    animation: ${rotate} 1.5s reverse infinite;\n  }\n`;\n\nconst Loader = ({ color, size }) => {\n  return (\n    <LoaderArea>\n      <LoaderBox size={size}>\n        <LoaderImg color={color} />\n        <LoaderBar color={color} />\n      </LoaderBox>\n    </LoaderArea>\n  );\n};\n\nLoader.propTypes = {\n  color: propTypes.string,\n  size: propTypes.number\n};\n\nLoader.defaultProps = {\n  color: \"black\",\n  size: 3\n};\n\nexport default Loader;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SelectBox = styled.div`\n  position: absolute;\n  padding: 12px;\n  opacity: 0.7;\n  z-index: 1;\n  select {\n    background-color: transparent;\n    border: 1px solid black;\n  }\n`;\n\nconst Select = ({ onChange }) => {\n  return (\n    <SelectBox>\n      <select onChange={onChange}>\n        <option value='en'>English</option>\n        <option value='zh'>中文</option>\n        <option value='jing'>晶晶</option>\n      </select>\n    </SelectBox>\n  );\n};\n\nexport default Select;\n","export const text = {\n  en: {\n    hall: {\n      welcome: \"Welcome to\",\n      chooseLogin: \"CHOOSE YOUR LOGIN\",\n      btn1: \"Anonymous\",\n      btn2: \"Use a nickname\",\n      dayTopic: \"TOP CHAT TOPICS OF THE DAY\",\n      comment: \"Comments\"\n    },\n    bar: {\n      title: \"BAR\",\n      subtitled: \"Choose your favorite atmosphere\",\n      filter: [\"ALL\", \"JOYFUL\", \"RELAXED\", \"INTENSE\"],\n      of: \"The bar of\",\n      feel: \"Feel free to talk about today.\",\n      now: \"Now we are talking about\",\n      seats: \"Seat available :\"\n    },\n    club: {\n      title: \"CLUB\",\n      subtitled: \"Find the entertainment you like\"\n    },\n    room: {\n      title: \"CHAT ROOM\",\n      subtitled: \"1 on 1 time\"\n    }\n  },\n  zh: {\n    hall: {\n      welcome: \"歡迎來到\",\n      chooseLogin: \"請選擇你的登入方式\",\n      btn1: \"匿名\",\n      btn2: \"使用暱稱\",\n      dayTopic: \"本日最熱門議題\",\n      comment: \"評論\"\n    },\n    bar: {\n      title: \"酒吧\",\n      subtitled: \"請選擇你喜歡的氣氛\",\n      filter: [\"全部\", \"歡樂\", \"輕鬆\", \"刺激\"],\n      of: \"酒吧主題\",\n      feel: \"自在暢談今天的事\",\n      now: \"我們現在正在聊...\",\n      seats: \"尚餘座位 :\"\n    },\n    club: {\n      title: \"俱樂部\",\n      subtitled: \"找到你喜歡的娛樂\"\n    },\n    room: {\n      title: \"聊天室\",\n      subtitled: \"一對一聊天\"\n    }\n  },\n  jing: {\n    hall: {\n      welcome: \"Welcome 來到\",\n      chooseLogin: \"選擇 YOUR LOGIN 方式\",\n      btn1: \"匿名\",\n      btn2: \"Use 暱稱\",\n      dayTopic: \"Today 最 Hot 議題\",\n      comment: \"評論s\"\n    },\n    bar: {\n      title: \"BAR\",\n      subtitled: \"Choose 你的 Favorite 氣氛\",\n      filter: [\"ALL\", \"歡樂\", \"RELAXED\", \"刺激\"],\n      of: \"Bar 的主題\",\n      feel: \"感覺 free 的 talk about 今天\",\n      now: \"我們現在 talking about 的\",\n      seats: \"Seat 尚餘 :\"\n    },\n    club: {\n      title: \"CLUB\",\n      subtitled: \"Find 你 Like 的娛樂\"\n    },\n    room: {\n      title: \"聊天 ROOM\",\n      subtitled: \"One 對 One 聊天\"\n    }\n  }\n};\n","import React, { Suspense, lazy, useState } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport Loader from \"./component/Loader\";\nimport Select from \"./component/Select\";\nimport Store from \"./store\";\nimport { text } from \"./i18n\";\n\nconst Hall = lazy(() => import(\"./router/hall\"));\nconst Bar = lazy(() => import(\"./router/bar\"));\nconst Club = lazy(() => import(\"./router/club\"));\nconst Room = lazy(() => import(\"./router/room\"));\nconst Chat = lazy(() => import(\"./router/chat\"));\n\nconst defaultTheme = {\n  primary: \"#DDB16F\",\n  secondary: \"white\",\n  lightgrey: \"rgba(0, 0, 0, 0.4)\",\n  grey: \"rgba(0, 0, 0, 0.53)\",\n  darkgrey: \"rgba(0, 0, 0, 0.7)\",\n  whitegrey: \"rgba(255, 255, 255, 0.6)\",\n  black: \"black\",\n  white: \"white\"\n};\n\nconst Main = styled.div`\n  position: absolute;\n  width: 100%;\n  max-width: 768px;\n  height: 100%;\n  left: 50%;\n  transform: translate(-50%);\n  background-color: ${props => props.theme.primary};\n`;\n\nfunction App() {\n  const [lang, setLang] = useState(\"en\");\n  const handleLang = e => {\n    setLang(e.target.value);\n  };\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Store.Provider value={{ text: text[lang] }}>\n        <Main>\n          <Select onChange={handleLang} />\n          <Router>\n            <Suspense fallback={<Loader />}>\n              <Switch>\n                <Route exact path='/' component={Hall} />\n                <Route exact path='/bar/' component={Bar} />\n                <Route exact path='/club/' component={Club} />\n                <Route exact path='/room/' component={Room} />\n                <Route exact path='/:type/chat/:chatId' component={Chat} />\n              </Switch>\n            </Suspense>\n          </Router>\n        </Main>\n      </Store.Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}