{"version":3,"sources":["component/Loader/index.js","App.js","serviceWorker.js","index.js"],"names":["LoaderArea","styled","div","rotate","keyframes","LoaderBox","props","size","LoaderImg","color","LoaderBar","Loader","defaultProps","Hall","lazy","Bar","Club","Room","Chat","defaultTheme","primary","secondary","lightgrey","grey","darkgrey","whitegrey","black","white","Main","theme","App","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gnDAIA,IAAMA,EAAaC,IAAOC,IAAV,KAcVC,EAASC,YAAH,KAMNC,EAAYJ,IAAOC,IAAV,IAEJ,SAAAI,GAAK,OAAIA,EAAMC,MACd,SAAAD,GAAK,OAAIA,EAAMC,OAIrBC,EAAYP,IAAOC,IAAV,IAMO,SAAAI,GAAK,OAAIA,EAAMG,QAY/BC,EAAYT,YAAOO,EAAPP,CAAH,IAeS,SAAAK,GAAK,OAAIA,EAAMG,OACtBN,EAIAA,GAIXQ,EAAS,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,MAAOF,EAAW,EAAXA,KACvB,OACE,kBAACP,EAAD,KACE,kBAACK,EAAD,CAAWE,KAAMA,GACf,kBAACC,EAAD,CAAWC,MAAOA,IAClB,kBAACC,EAAD,CAAWD,MAAOA,OAW1BE,EAAOC,aAAe,CACpBH,MAAO,QACPF,KAAM,GAGOI,Q,2NCzFf,IAAME,EAAOC,eAAK,kBAAM,+BAClBC,EAAMD,eAAK,kBAAM,+BACjBE,EAAOF,eAAK,kBAAM,+BAClBG,EAAOH,eAAK,kBAAM,+BAClBI,EAAOJ,eAAK,kBAAM,+BAElBK,EAAe,CACnBC,QAAS,UACTC,UAAW,QACXC,UAAW,qBACXC,KAAM,sBACNC,SAAU,qBACVC,UAAW,2BACXC,MAAO,QACPC,MAAO,SAGHC,EAAO3B,IAAOC,IAAV,IAOY,SAAAI,GAAK,OAAIA,EAAMuB,MAAMT,UAuB5BU,MApBf,WACE,OACE,kBAAC,IAAD,CAAeD,MAAOV,GACpB,kBAACS,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUG,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,QAAQC,UAAWnB,IACrC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAWlB,IACtC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASC,UAAWjB,IACtC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,sBAAsBC,UAAWhB,UC/B7CiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.15c41a15.chunk.js","sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst LoaderArea = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  padding-bottom: 100px;\n  z-index: 100;\n`;\n\nconst rotate = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst LoaderBox = styled.div`\n  position: relative;\n  width: ${props => props.size}rem;\n  height: ${props => props.size}rem;\n  border-radius: 100%;\n`;\n\nconst LoaderImg = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 100%;\n  border: 2px solid ${props => props.color};\n  opacity: 0.3;\n  &::after {\n    position: absolute;\n    content: \"Loading...\";\n    width: 100%;\n    font-size: 12px;\n    text-align: center;\n    top: 120%;\n  }\n`;\n\nconst LoaderBar = styled(LoaderImg)`\n  border: none;\n  opacity: 0.6;\n\n  &::before,\n  &::after {\n    box-sizing: border-box;\n    position: absolute;\n    content: \"\";\n    width: 16%;\n    height: 100%;\n    top: 0;\n    left: 50%;\n    margin-left: -8%;\n    border-radius: 10%;\n    border: 2px solid ${props => props.color};\n    animation: ${rotate} 1.5s infinite;\n  }\n\n  &::after {\n    animation: ${rotate} 1.5s reverse infinite;\n  }\n`;\n\nconst Loader = ({ color, size }) => {\n  return (\n    <LoaderArea>\n      <LoaderBox size={size}>\n        <LoaderImg color={color} />\n        <LoaderBar color={color} />\n      </LoaderBox>\n    </LoaderArea>\n  );\n};\n\nLoader.propTypes = {\n  color: propTypes.string,\n  size: propTypes.number\n};\n\nLoader.defaultProps = {\n  color: \"black\",\n  size: 3\n};\n\nexport default Loader;\n","import React, { Suspense, lazy } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport Loader from \"./component/Loader\";\n\nconst Hall = lazy(() => import(\"./router/hall\"));\nconst Bar = lazy(() => import(\"./router/bar\"));\nconst Club = lazy(() => import(\"./router/club\"));\nconst Room = lazy(() => import(\"./router/room\"));\nconst Chat = lazy(() => import(\"./router/chat\"));\n\nconst defaultTheme = {\n  primary: \"#DDB16F\",\n  secondary: \"white\",\n  lightgrey: \"rgba(0, 0, 0, 0.4)\",\n  grey: \"rgba(0, 0, 0, 0.53)\",\n  darkgrey: \"rgba(0, 0, 0, 0.7)\",\n  whitegrey: \"rgba(255, 255, 255, 0.6)\",\n  black: \"black\",\n  white: \"white\"\n};\n\nconst Main = styled.div`\n  position: absolute;\n  width: 100%;\n  max-width: 768px;\n  height: 100%;\n  left: 50%;\n  transform: translate(-50%);\n  background-color: ${props => props.theme.primary};\n`;\n\nfunction App() {\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Main>\n        <Router>\n          <Suspense fallback={<Loader />}>\n            <Switch>\n              <Route exact path='/' component={Hall} />\n              <Route exact path='/bar/' component={Bar} />\n              <Route exact path='/club/' component={Club} />\n              <Route exact path='/room/' component={Room} />\n              <Route exact path='/:type/chat/:chatId' component={Chat} />\n            </Switch>\n          </Suspense>\n        </Router>\n      </Main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}